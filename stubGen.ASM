format PE GUI ;or PE64
include 'win32ax.inc'

section '.text' code readable executable writeable
    mappedHello file 'openttd_real_tea.bin'  ;The .text is just the already-mapped executable.


section '.rsrc' readable
    file 'openttd_real_rsrc_patched.bin' ;Replace with files that were generated by Source.cpp, I was just trying it out on a game called OPENTTD.


section '.text' code readable executable
  start:  ;The entry point for the stub.
	call decrypt  ;Decrypt the payload.
	call _resolveImports ;Resolve any imports to satisfy the payload.
	jmp mappedHello + 0x2AEDDF - 0x1000 ;Jump to the payload's entry point.


section '.imports' readable
    include 'openttd_real_importStrings.txt' ;All of the import macros.


macro imp funcName,IATPosition,dllName,Ordinal ;Macro to load a function from a dll and put it in the IAT.
{
    dllHandle equ eax

    invoke GetModuleHandle,dllName

    cmp eax,0
    JNE @f
       invoke LoadLibraryA,dllName

    @@:

    if Ordinal = 0x00  ;Import by name
	invoke GetProcAddress,dllHandle,funcName
    else  ;Import by ordinal
	invoke GetProcAddress,dllHandle,Ordinal
    end if


    mov [IATPosition], eax
}

_resolveImports:
    include 'openttd_real_importMacros.txt'
    ret

decrypt:
    mov ecx, 0	;Init counter

    loop1:
	lea eax, [ecx + mappedHello] ;Calculate byteX2 that we're decrypting.
	push ecx ;save counter
	push key
	push eax
	call  _decrypt ;decrypts 2 bytes.
	pop eax
	pop eax
	pop ecx

	inc ecx  ;since it decrypes 2 bytes, inc twice.
	inc ecx
	cmp ecx, 0xF815C8 ;F815C8 is loadedRange + 0x2000
	jnz loop1
    ret

    ;uint8_t key[4] = { 0x11, 0x22, 0x33, 0x44 };
    key:
    db 0x11
    db 0x22
    db 0x33
    db 0x44

;void decrypt (uint8_t* v, uint8_t* k)
_decrypt:
    include "teaDecryption.asm"

.end start

